// Code generated by MockGen. DO NOT EDIT.
// Source: cart.go

// Package mock_transaction is a generated GoMock package.
package mock_transaction

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jekiapp/hi-mod-arch/internal/model"
)

// MockIGetCartData is a mock of IGetCartData interface.
type MockIGetCartData struct {
	ctrl     *gomock.Controller
	recorder *MockIGetCartDataMockRecorder
}

// MockIGetCartDataMockRecorder is the mock recorder for MockIGetCartData.
type MockIGetCartDataMockRecorder struct {
	mock *MockIGetCartData
}

// NewMockIGetCartData creates a new mock instance.
func NewMockIGetCartData(ctrl *gomock.Controller) *MockIGetCartData {
	mock := &MockIGetCartData{ctrl: ctrl}
	mock.recorder = &MockIGetCartDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetCartData) EXPECT() *MockIGetCartDataMockRecorder {
	return m.recorder
}

// GetCartFromDB mocks base method.
func (m *MockIGetCartData) GetCartFromDB(userID int64) (model.CartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartFromDB", userID)
	ret0, _ := ret[0].(model.CartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartFromDB indicates an expected call of GetCartFromDB.
func (mr *MockIGetCartDataMockRecorder) GetCartFromDB(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartFromDB", reflect.TypeOf((*MockIGetCartData)(nil).GetCartFromDB), userID)
}

// MockIConvertCartItemToCheckoutItem is a mock of IConvertCartItemToCheckoutItem interface.
type MockIConvertCartItemToCheckoutItem struct {
	ctrl     *gomock.Controller
	recorder *MockIConvertCartItemToCheckoutItemMockRecorder
}

// MockIConvertCartItemToCheckoutItemMockRecorder is the mock recorder for MockIConvertCartItemToCheckoutItem.
type MockIConvertCartItemToCheckoutItemMockRecorder struct {
	mock *MockIConvertCartItemToCheckoutItem
}

// NewMockIConvertCartItemToCheckoutItem creates a new mock instance.
func NewMockIConvertCartItemToCheckoutItem(ctrl *gomock.Controller) *MockIConvertCartItemToCheckoutItem {
	mock := &MockIConvertCartItemToCheckoutItem{ctrl: ctrl}
	mock.recorder = &MockIConvertCartItemToCheckoutItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConvertCartItemToCheckoutItem) EXPECT() *MockIConvertCartItemToCheckoutItemMockRecorder {
	return m.recorder
}

// GetProductData mocks base method.
func (m *MockIConvertCartItemToCheckoutItem) GetProductData(productID int64) (model.ProductData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductData", productID)
	ret0, _ := ret[0].(model.ProductData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductData indicates an expected call of GetProductData.
func (mr *MockIConvertCartItemToCheckoutItemMockRecorder) GetProductData(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductData", reflect.TypeOf((*MockIConvertCartItemToCheckoutItem)(nil).GetProductData), productID)
}
