// Code generated by MockGen. DO NOT EDIT.
// Source: create_order.go

// Package mock_post_payment is a generated GoMock package.
package mock_post_payment

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jekiapp/hi-mod-arch/internal/model"
)

// MockIcreateOrderUsecase is a mock of IcreateOrderUsecase interface.
type MockIcreateOrderUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIcreateOrderUsecaseMockRecorder
}

// MockIcreateOrderUsecaseMockRecorder is the mock recorder for MockIcreateOrderUsecase.
type MockIcreateOrderUsecaseMockRecorder struct {
	mock *MockIcreateOrderUsecase
}

// NewMockIcreateOrderUsecase creates a new mock instance.
func NewMockIcreateOrderUsecase(ctrl *gomock.Controller) *MockIcreateOrderUsecase {
	mock := &MockIcreateOrderUsecase{ctrl: ctrl}
	mock.recorder = &MockIcreateOrderUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIcreateOrderUsecase) EXPECT() *MockIcreateOrderUsecaseMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockIcreateOrderUsecase) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockIcreateOrderUsecaseMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).Begin))
}

// Commit mocks base method.
func (m *MockIcreateOrderUsecase) Commit(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockIcreateOrderUsecaseMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).Commit), tx)
}

// GetPromotion mocks base method.
func (m *MockIcreateOrderUsecase) GetPromotion(coupon string, totalPrice float64) (model.PromotionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", coupon, totalPrice)
	ret0, _ := ret[0].(model.PromotionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockIcreateOrderUsecaseMockRecorder) GetPromotion(coupon, totalPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).GetPromotion), coupon, totalPrice)
}

// InsertOrder mocks base method.
func (m *MockIcreateOrderUsecase) InsertOrder(tx *sql.Tx, order model.OrderData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", tx, order)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockIcreateOrderUsecaseMockRecorder) InsertOrder(tx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).InsertOrder), tx, order)
}

// InsertOrderItem mocks base method.
func (m *MockIcreateOrderUsecase) InsertOrderItem(tx *sql.Tx, orderID int64, order model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrderItem", tx, orderID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrderItem indicates an expected call of InsertOrderItem.
func (mr *MockIcreateOrderUsecaseMockRecorder) InsertOrderItem(tx, orderID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrderItem", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).InsertOrderItem), tx, orderID, order)
}

// Rollback mocks base method.
func (m *MockIcreateOrderUsecase) Rollback(tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockIcreateOrderUsecaseMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockIcreateOrderUsecase)(nil).Rollback), tx)
}
