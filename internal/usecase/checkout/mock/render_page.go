// Code generated by MockGen. DO NOT EDIT.
// Source: render_page.go

// Package mock_checkout is a generated GoMock package.
package mock_checkout

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/jekiapp/hi-mod-arch/internal/model"
)

// MockrenderPageItf is a mock of renderPageItf interface.
type MockrenderPageItf struct {
	ctrl     *gomock.Controller
	recorder *MockrenderPageItfMockRecorder
}

// MockrenderPageItfMockRecorder is the mock recorder for MockrenderPageItf.
type MockrenderPageItfMockRecorder struct {
	mock *MockrenderPageItf
}

// NewMockrenderPageItf creates a new mock instance.
func NewMockrenderPageItf(ctrl *gomock.Controller) *MockrenderPageItf {
	mock := &MockrenderPageItf{ctrl: ctrl}
	mock.recorder = &MockrenderPageItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrenderPageItf) EXPECT() *MockrenderPageItfMockRecorder {
	return m.recorder
}

// GetCartFromDB mocks base method.
func (m *MockrenderPageItf) GetCartFromDB(userID int64) (model.CartData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartFromDB", userID)
	ret0, _ := ret[0].(model.CartData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartFromDB indicates an expected call of GetCartFromDB.
func (mr *MockrenderPageItfMockRecorder) GetCartFromDB(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartFromDB", reflect.TypeOf((*MockrenderPageItf)(nil).GetCartFromDB), userID)
}

// GetProductData mocks base method.
func (m *MockrenderPageItf) GetProductData(productID int64) (model.ProductData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductData", productID)
	ret0, _ := ret[0].(model.ProductData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductData indicates an expected call of GetProductData.
func (mr *MockrenderPageItfMockRecorder) GetProductData(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductData", reflect.TypeOf((*MockrenderPageItf)(nil).GetProductData), productID)
}

// GetPromotion mocks base method.
func (m *MockrenderPageItf) GetPromotion(coupon string, totalPrice float64) (model.PromotionData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromotion", coupon, totalPrice)
	ret0, _ := ret[0].(model.PromotionData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromotion indicates an expected call of GetPromotion.
func (mr *MockrenderPageItfMockRecorder) GetPromotion(coupon, totalPrice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromotion", reflect.TypeOf((*MockrenderPageItf)(nil).GetPromotion), coupon, totalPrice)
}

// GetUserInfo mocks base method.
func (m *MockrenderPageItf) GetUserInfo(userID int64) (model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", userID)
	ret0, _ := ret[0].(model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockrenderPageItfMockRecorder) GetUserInfo(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockrenderPageItf)(nil).GetUserInfo), userID)
}
